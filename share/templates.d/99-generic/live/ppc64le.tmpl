<%page args="kernels, runtime_img, basearch, inroot, outroot, product, isolabel, extra_boot_args"/>
<%
configdir="tmp/config_files/ppc"
BOOTDIR="ppc"
GRUBDIR="boot/grub"
LIVEDIR="LiveOS"
LORAXDIR="usr/share/lorax/"

## NOTE: yaboot freaks out and stops parsing its config if it sees a '\',
## so we can't use the udev escape sequences in the root arg.
## Instead we'll just replace any non-ASCII characters in the isolabel
## with '_', which means we won't need any udev escapes.
isolabel = ''.join(ch if ch.isalnum() else '_' for ch in isolabel)

import os
from os.path import basename
from pylorax.sysutils import joinpaths

# Test the runtime_img, if it is > 4GiB we need to set -iso-level to 3
if os.stat(joinpaths(inroot, runtime_img)).st_size >= 4*1024**3:
    isoargs = "-iso-level 3"
else:
    isoargs = ""
%>

mkdir ${LIVEDIR}
install ${runtime_img} ${LIVEDIR}/squashfs.img
treeinfo stage2 mainimage ${LIVEDIR}/squashfs.img

## install the bootloaders
##   ppc/chrp: for normal PPC systems.
##             uses /ppc/bootinfo.txt   in the iso root
##             uses /boot/grub/grub.cfg in the iso root
mkdir ${BOOTDIR}
## boot stuff for normal (CHRP/PREP) PPC systems
install ${configdir}/bootinfo.txt ${BOOTDIR}

mkdir ${GRUBDIR}/powerpc-ieee1275
install /usr/lib/grub/powerpc-ieee1275/core.elf ${GRUBDIR}/powerpc-ieee1275
install /usr/lib/grub/powerpc-ieee1275/*.mod ${GRUBDIR}/powerpc-ieee1275
install /usr/lib/grub/powerpc-ieee1275/*.lst ${GRUBDIR}/powerpc-ieee1275

install ${configdir}/grub.cfg.in     ${GRUBDIR}/grub.cfg
replace @PRODUCT@ '${product.name}'  ${GRUBDIR}/grub.cfg
replace @VERSION@ '${product.version}' ${GRUBDIR}/grub.cfg
replace @ROOT@ 'root=live:CDLABEL=${isolabel|udev}' ${GRUBDIR}/grub.cfg
replace @EXTRA@ '${extra_boot_args}' ${GRUBDIR}/grub.cfg

## Install kernel and bootloader config (in separate places for each arch)
%for kernel in kernels:
    <%
      bits = 64
      ## separate dirs/images for each arch
      KERNELDIR=BOOTDIR+"/ppc%s" % bits
    %>
    ## install kernel
    mkdir ${KERNELDIR}
    installkernel images-${kernel.arch} ${kernel.path} ${KERNELDIR}/vmlinuz
    installinitrd images-${kernel.arch} ${kernel.initrd.path} ${KERNELDIR}/initrd.img

    treeinfo images-${kernel.arch} zimage
%endfor

# Create optional product.img and updates.img
<% filegraft=""; images=["product", "updates"] %>
%for img in images:
    %if exists("%s/%s/" % (LORAXDIR, img)):
        installimg ${LORAXDIR}/${img}/ images/${img}.img
        treeinfo images-${basearch} ${img}.img images/${img}.img
        <% filegraft += " images/{0}.img={1}/images/{0}.img".format(img, outroot) %>
    %endif
%endfor

# Add the license files
%for f in glob("usr/share/licenses/*-release-common/*"):
    install ${f} ${f|basename}
    <% filegraft += " {0}={1}/{0}".format(basename(f), outroot) %>
%endfor

## make boot.iso
runcmd xorrisofs -v -U -J -R ${isoargs} \
        -o ${outroot}/images/boot.iso \
        -r -l -sysid PPC \
        -A "${product.name} ${product.version}" -V '${isolabel}' \
        -volset "${product.version}" -volset-size 1 -volset-seqno 1 \
        -chrp-boot \
        -graft-points \
        ${BOOTDIR}=${outroot}/${BOOTDIR} \
        ${GRUBDIR}=${outroot}/${GRUBDIR} \
        ${LIVEDIR}=${outroot}/${LIVEDIR} ${filegraft}

%for kernel in kernels:
    treeinfo images-${kernel.arch} boot.iso images/boot.iso
%endfor
